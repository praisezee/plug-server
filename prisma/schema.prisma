// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RegistrationStatus{
  REGISTERED
  NOTREGISTERED
}

enum Gender{
  MALE
  FEMALE
}

enum IdType{
  PASSPORT
  NIN
  VOTER_CARD
  DRIVER_LICENCE
}

enum CustomerType{
  INDIVIDUAL
  BUSINESS
}

enum DiscountType{
  FLAT
  PERCENTAGE
}

enum VariationType{
  COLOR
  SIZE
  OTHERS
}

enum InvoiceStatus{
  PAID
  UNPAID
  OVERDUE
  PARTIAL
}

enum OrderStatus{
  PENDING
  COMPLETED
  DISPATCHED
  RETURNED
}

enum PaymentMethod{
  DEPOSIT
  CHECKOUT
}


model User{
  id String @unique @default(uuid())
  name String
  phone_number  String
  email String @unique
  status RegistrationStatus
  password String
  terms Boolean
  otp Int?
  dp String?
  banner String?
  hasPaid Boolean @default(false)
  isVerified Boolean @default(false)
  isApproved Boolean @default(false)
  description String?
  isDefaultPin Boolean @default(true)
  pin String?
  account_id Int @unique @default(3)
  refresh_token String[]
  reset_password_token String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  business BusinessKyc? 
  personal PersonalKyc?
  domain Domain?
  customers Customer[]
  items Item[]
  groups Group[]
  invoices Invoice[]
}

model Domain{
  id String @unique @default(uuid())
  userId String @unique
  url String @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
}

model PersonalKyc{
  id String @unique @default(uuid())
  userId String @unique
  firstname String
  lastname String
  gender Gender
  dob String
  bvn String
  phone_number String
  address String
  biz_address String
  biz_city String
  biz_state String
  state String
  city String
  id_type IdType
  id_number String
  id_exp String
  proof_id String
  proof_address String
  principal_image String
  other_docs String[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
}

model BusinessKyc{
  id String @unique @default(uuid())
  userId String @unique
  name String
  reg_type String
  reg_date String
  industry String
  reg_address String
  biz_address String
  biz_city String
  biz_state String
  reg_city String
  reg_state String
  reg_number String
  tax_number String
  biz_cert String
  mermat_doc String
  status_report String
  principal_image String
  id_type IdType
  proof_id String
  proof_address String
  other_docs String[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  directors Directors[]
}

model Directors{
  id String @unique @default(uuid())
  businessId String @unique
  firstname String
  lastname String
  gender Gender
  dob String
  address String
  state String
  city String
  owner_share Int
  role String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  business BusinessKyc @relation(fields: [businessId],references: [id],onDelete: Cascade)
}


model Customer{
  id String @unique @default(uuid())
  userId String
  type CustomerType
  name String
  biz_name String?
  phone_number String
  dispatch_location String?
  email String?
  address String?
  landmark String?
  city String?
  state String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  invoices Invoice[]
}


model Item {
  id String @unique @default(uuid())
  userId String
  title String
  category String
  description String
  group String @default("all")
  price Float
  quantity Int
  image String[]
  hasDiscount Boolean @default(false)
  discount Float?
  discountType DiscountType?
  hasVariation Boolean @default(false)
  unit String
  isPublic Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  variations Variation[]

  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  groups Group @relation(fields: [group],references: [name])
}

model Group{
  id String @unique @default(uuid())
  name String @unique
  userId String
  items Item[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Variation {
  id String @unique @default(uuid())
  itemId String
  type VariationType
  variant String
  price Float
  quantity Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model Invoice {
  id String @unique @default(uuid())
  invoice_number String @unique
  userId String
  due_date String
  due_day Int
  others String?
  customerId String
  total Float
  discount Float @default(0)
  tax Float @default(0)
  status InvoiceStatus @default(UNPAID)
  isFullfiled Boolean @default(false)
  note String?
  signature String?
  payment_method PaymentMethod?
  order_status OrderStatus @default(PENDING)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt


  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items InvoiceItem[]
}


model InvoiceItem{
  id String @unique @default(uuid())
  invoiceId String
  itemId String
  name  String
  description String
  image String
  quantity Int
  price Float
  discount Float @default(0)
  tax Float @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  invoice Invoice @relation(fields: [invoiceId],references: [id],onDelete: Cascade)
}
